server {

  listen 80;

  location ^~ /static {
    # static files handled by nginx and not django
    # TODO: checks with WhiteNose, varnish cache or not hahah

    root /usr/share/nginx/html;
    expires off;
    access_log off;
  }

  location ~ ^/api {
    # assuming django will be used as an REST API
    # X-Script-Name is needed in order to serve django as a subpath
    # in Django, url route is defined without taking care of `api subpath`

    proxy_set_header Referer $http_referer;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header X-Script-Name /api;
    proxy_set_header X-Scheme $scheme;
    proxy_pass http://server:8000;

    # increase if upstream error said too big header while reading response
    proxy_buffer_size 8k;
    proxy_busy_buffers_size 8k;
    proxy_buffers 128 4k;
  }

  location / {
    try_files $uri @frontend;
  }

  location @frontend {
    proxy_set_header Referer $http_referer;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-NginX-Proxy true;

    proxy_pass http://frontend:8000;

    # increase if upstream error said too big header while reading response
    proxy_buffer_size 8k;
    proxy_busy_buffers_size 8k;
    proxy_buffers 128 4k;

    # websocket proxying
    # Needed with socket when working for auto-reload etc..
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

}